export const demoMarkdown = `#مهاجرت از Vue 2 به Svelte در Escape

> **یادداشت:**  
> پیش نمایش از https://github.com/vuejs/blog/blob/master/posts/on-migration.md

اخیراً، افراد حاضر در Escape یک [پست وبلاگ](https://escape.tech/blog/from-vue2-to-svelte/) را در مورد مهاجرت خود از Vue 2 به Svelte به اشتراک گذاشتند و Vue 3 را با Svelte مقایسه کردند. ما متوجه شدیم که مقاله حاوی تعدادی نادرستی است. در این پست، ما برخی از افکار را از دیدگاه خود به اشتراک خواهیم گذاشت و امیدواریم که تصورات غلط احتمالی که این پست می‌تواند ایجاد کند را روشن کنیم.

---

قبل از اینکه به جزئیات بپردازیم، می‌خواهیم تأکید کنیم که به انتخاب فناوری‌های توسعه‌دهندگان احترام می‌گذاریم و معتقدیم که باید از چیزهایی استفاده کنید که بهره‌وری شما را بیشتر می‌کند. ما همچنین برای تیم Svelte احترام زیادی قائل هستیم، به ویژه برای پیگیری آنها برای سادگی و مختصر بودن در طراحی API.

## نکات شفاف سازی

پست اصلی شامل یک نمودار مقایسه است که شامل تعدادی از مسائل است که شایسته توضیح است:

![comparison-chart](https://blog.vuejs.org/compare.png)

### تایپ کردن

> Vue 3 رویدادهای تایپ شده را پشتیبانی نمی کند این از نسخه 3.2 در دسترس بوده است ([مستندات مرتبط(https://vuejs.org/guide/typescript/composition-api.html#typing-component-emits)).

گذشته از این، ما با این نتیجه که "Svelte تجربه تایپ بهتری ارائه می دهد" مخالفیم. با بهترین دانش ما، پشتیبانی TypeScript برای Vue 3 و Svelte در وضعیت فعلی آنها تقریباً قابل مقایسه است.

### دسترسی جهانی محدود

> نمی‌توان فهرست‌های TypeScript را در کامپوننت Vue وارد کرد و از آن استفاده کرد. این اشتباه است. در اینجا [مثالی وجود دارد](https://sfc.vuejs.org/#eNpVjz0OwjAMha9iZWGBZK8qJBZOkaWNDLQiP4pdQKpyd5y0AyxWPsfPz29Vl5T0a0HVqZ5cnhIDIS/pbMPkU8wMK1xjhAK3HD0ctGEk1kwHG3qzKWRWgNGn58AoBLA2lR6glB8c/9E17GXjrlRHtZme/JD0TDHIWWtV2P2DrOqgdWpP7q5s1YM5UWcM3VwNM5OO+W7kpfMSePKokfxpzPFNmGWxVXWFmBex3AOJFX5aYhcDMWBYfIve7IZjrWOrrurKF/sKa48=). در واقع بین Vue و Svelte دقیقاً یکسان عمل می کند.

### آبجکت های واکنش پذیر خارجی

> جزئی (فقط برای آبجکت)
این کمی مبهم است و در پست بیشتر توضیح داده نشد اما همه  [API های واکنش‌پذیری](https://vuejs.org/api/reactivity-core.html)از جمله \`ref\`, \`computed\`و ناظران، می توانند در خارج از کامپوننت‌ استفاده شوند تا به عنوان فروشگاه های متقابل کامپوننتی ساده خدمت کنند.


### مرزهای خطا

Vue همیشه از طریق هوک چرخه حیات [onErrorCaptured](https://vuejs.org/api/composition-api-lifecycle.html#onerrorcaptured) می‌تواند خطاهای پرتاب شده از درخت‌های کامپوننت نزول را در یک کامپوننت اجدادی ثبت کند. این شامل خطاهای پرتاب شده از کنترل کننده رویداد async و هوک چرخه حیات نیز می شود.

Vue داخلی برای کنترل وضعیت Promise به طور مستقیم در الگو ندارد، اما این کار را می توان به راحتی با کتابخانه هایی مانند [vue-promised](https://github.com/posva/vue-promised) به دست آورد.

### ادغام با کتابخانه ها

> افزودن پلاگین‌های js خالص در Svelte ساده‌تر است. این پست شامل نمونه‌ای از ادغام با Prism.js برای پشتیبانی از این نکته بود. با این حال، در Vue دقیقاً هنگام استفاده از \`<script setup>\` کار می‌کند.

### متا فریمورک ها

این پست همچنین فریمورک های متا ساخته شده بر روی Vue و Svelte، یعنی Nuxt و SvelteKit را مقایسه می کند و Vite را به عنوان یک مزیت برای SvelteKit ذکر می کند. با این حال، Nuxt 3 به تازگی به ثبات رسیده است و همچنین به طور پیش فرض از Vite استفاده می کند. هم تیم Nuxt و هم تیم SvelteKit رابطه کاری نزدیک با تیم Vite دارند.

## سینتکس (Syntax)

ما به ترجیحات سینتکس مختلف احترام می گذاریم، اما بحث در مورد مبادلات بین طرح ها نیز مهم است.

اول از همه، ما معتقد نیستیم که تفاوت‌هایی مانند بریس‌های فرفری منفرد در مقابل دوتایی، دستورالعمل‌های محدود به عنصر در مقابل جریان‌های کنترلی به سبک سبیل، یا نیاز به تگ اضافی \`<template>\` تأثیر قابل توجهی بر روی شما داشته باشد. بهره وری بلند مدت نحو قالب چیزی است که در طول زمان به سرعت درونی می شود.

وقتی صحبت از واکنش‌پذیری به میان می‌آید، Svelte یک نحو بسیار مختصر برای اعلام و تغییر وضعیت کامپوننت‌ ارائه می‌دهد، و چندین نکته قابل بحث است:

1. برای بیان واکنش پذیری، سه مفهوم اساسی وجود دارد: حالت، حالت مشتق شده و اثرات. Svelte از متغیرهای ساده برای حالت وآیکون جادویی \`$\` برای حالت مشتق شده و افکت استفاده می کند. Vue از APIهای صریح برای اعلام هر یک (\`ref\`, \`computed,\` \`watchEffect\`) استفاده می کند. برخی از کاربران ممکن است نحو جادویی را ترجیح دهند، در حالی که برخی دیگر ممکن است APIهای صریح را ترجیح دهند - برای هر دو روش امکان اجرا وجود دارد

2. واکنش پذیری مبتنی بر کامپایلر Svelte جایی را که می توان از چنین نحوی استفاده کرد، محدود می کند. نمی توان آن را خارج از کامپوننت‌ی Svelte یا در موارد استفاده که مرحله ساخت امکان پذیر نیست استفاده کرد. در حالی که برای Vue، Composition API را می‌توان به همان روش در داخل و خارج از کامپوننت‌ها، یا حتی در تنظیمات بدون گام استفاده کرد.

3. به دلیل (2)، Svelte نیاز به ارائه یک مجموعه اضافی از API (store) برای مدیریت مفاهیم واکنش‌پذیری یکسان در خارج از کامپوننت‌‌ها دارد. از آنجایی که این دو نحو به راحتی به یکدیگر تبدیل نمی شوند، اصطکاک را برای جابجایی/بازسازی منطق از کامپوننت‌ ایجاد می کند.

با این گفته، ما در حال آزمایش یک ویژگی به نام [Reactivity Transform](https://vuejs.org/guide/extras/reactivity-transform.html) در Vue بوده‌ایم که به شما امکان می‌دهد کامپوننت‌های Vue مانند این را بنویسید:

\`\`\`vue
<script setup lang="ts">
let count = $ref(0)
function increment() {
  count++
}
</script>
<template>
  <button @click="increment">{{ count }}</button>
</template>
\`\`\`

سطحی از اختصار مشابه Svelte ارائه می دهد، اما در فایل های JS/TS ساده نیز قابل استفاده است. de-sugar خودکار سینتکس به کد Composition API ساده نیز ساده است.

## عملکرد و اندازه بسته نرم افزاری

بهبود عملکرد و اندازه باندل به عنوان یکی از دلایل مهاجرت ذکر شد. در حالی که بدون شک Svelte بسیار کارآمد و سبک وزن است، بهبود آن نسبت به سایر فریمورک ها لزوما تضمین نمی شود. در واقع، می‌تواند به عوامل دیگری از جمله پیاده‌سازی واقعی، فضای بهینه‌سازی و مقیاس برنامه بستگی داشته باشد.

برای مرجع، Vue 3 می‌تواند در [js-framework-benchmark](https://krausest.github.io/js-framework-benchmark/index.html) با مقدار کمی بهینه‌سازی، بهتر از Svelte عمل کند.Vue 3 با یک مدل رندر ترکیبی زمان اجرا/کامپایلر که ما آن را [Compiler-Informed Virtual DOM](https://vuejs.org/guide/extras/rendering-mechanism.html#compiler-informed-virtual-dom) می نامیم، به این امر دست می یابد.. از اطلاعاتی استفاده می‌کند که می‌توان در زمان کامپایل برای بهینه‌سازی عملکرد زمان اجرا شناخته شد، در حالی که سازگاری با توابع رندر دستی را حفظ می‌کند..

از نظر اندازه باندل، Svelte برای تولید ویجت ها یا کامپوننت‌ های وب که فقط شامل یک یا چند کامپوننت‌ هستند عالی است، اما اندازه زمان اجرای سبک آن را می توان با خروجی کد هر کامپوننت‌ پرمخاطب تر در مقایسه با سایر چارچوب ها جبران کرد. 
[این تحقیق](https://github.com/yyx990803/vue-svelte-size-analysis) نشان می‌دهد که اندازه بسته نرم‌افزاری Svelte می‌تواند در برنامه‌های مقیاس بزرگ‌تر، به‌ویژه با فعال کردن هیدراتاسیون SSR، به یک نقطه ضعف تبدیل شود.

لازم به ذکر است که هر دو Svelte و Vue 3 به احتمال زیاد به اندازه کافی برای استفاده شما کارایی دارند و هر دو فریمورک به تکامل و بهبود ادامه خواهند داد. تیم Svelte برنامه هایی را برای بهبود اندازه خروجی کد هر جزء در Svelte 4 ذکر کرده است. در سمت Vue، ما همچنین در حال بررسی یک استراتژی تلفیقی جایگزین و کارآمدتر (نام رمز: Vapor) هستیم که از [Solid.js] (https) الهام گرفته شده است. ://www.solidjs.com/). حالت Vapor  به کامپوننت‌ Vue اجازه می دهد تا در قالبی کامپایل شوند که شامل زمان اجرا DOM مجازی نباشد. در حال حاضر هنوز در مرحله تحقیق است و در سال 2023 جزئیات بیشتری در مورد آن به اشتراک خواهیم گذاشت.

## حفظ داده ها در بررسی وضعیت JS

علاوه بر این، یک نکته مهم در نظر گرفته شده مربوط به رتبه رضایت از نظرسنجی وضعیت جاوا اسکریپت است. در حالی که Svelte قطعاً شایسته امتیاز بالای خود در نظرسنجی است، استفاده از چنین رتبه‌بندی‌هایی برای تصمیم‌گیری در مورد اینکه آیا باید برنامه خود را مهاجرت کنید یا خیر، می‌تواند بر تیم شما تأثیر منفی بگذارد زیرا زمینه‌های گمشده زیادی وجود دارد.

در این نظرسنجی، رتبه رضایت از یک فریم ورک به عنوان نسبت تعداد کاربرانی که دوباره از آن استفاده می‌کنند، در مقایسه با کسانی که استفاده نمی‌کنند، تعریف می‌شود. توجه داشته باشید که این عدد فقط بر اساس پاسخ های کاربرانی که از فریم ورک استفاده کرده اند محاسبه می شود. باید منصفانه گفت که این فرمول به طور طبیعی به نفع فناوری های جدیدتر است. در تئوری، اگر یک فریم ورک فقط یک کاربر داشته باشد و آن کاربر گزارش دهد که دوباره از آن استفاده خواهد کرد، فریم ورک امتیاز 100% عالی را کسب می کند!

یک فناوری در مرحله اولیه خود در درجه اول کاربرانی را جذب می کند که به خودی خود این فناوری را دوست دارند. با این حال، هنگامی که به جریان اصلی تبدیل می‌شود، در سازمان‌های مقیاس بزرگ‌تر که در آن تصمیم‌گیری برای انتخاب فناوری از بالا به پایین گرفته می‌شود، شروع به پذیرش می‌کند. این بدان معناست که کاربران بیشتری خواهند بود که باید بدون توجه به ترجیحات شخصی خود با آن کار کنند. همچنین کاربران بیشتری را جذب می کند که صرفاً به دلیل محبوبیت آن را امتحان می کنند، اما ممکن است مخاطب هدف نباشند. علاوه بر این، پذیرش گسترده‌تر، فناوری را در طیف وسیع‌تری از سناریوها به چالش می‌کشد و مسائلی را که ممکن است فقط در موارد سخت‌تر ایجاد شود، آشکار می‌کند.

از سوی دیگر، اگر یک فناوری جدیدتر نتواند امتیاز بالاتری نسبت به فناوری‌های موجود در میان پذیرندگان اولیه خود کسب کند، احتمالاً حتی وارد نظرسنجی نخواهد شد.

این به هیچ وجه به این معنا نیست که دستاوردهای Svelte را کم کند، و همچنین بهانه ای برای ما نیست. انتقال Vue 2 به Vue 3 تا آنجا که می‌توانست به آرامی پیش نرفت و قطعاً بر روی امتیاز رضایت تأثیر گذاشته است. امیدواریم بتوانیم با ادامه بهبود Vue 3 آن را تغییر دهیم. اما امیدواریم که به این نکته پی ببرید: این عدد به تنهایی به طور کامل نشان‌دهنده «خوبی» یک چارچوب نیست، چه رسد به اینکه چگونه با شرایط استفاده شما مطابقت دارد. به یاد داشته باشید که نظرسنجی‌ها اغلب در معرض متغیرها و زمینه‌های گیج‌کننده زیادی هستند که ممکن است در موقعیت شما صدق نکنند، بنابراین مراقب باشید که آنها را به عنوان انجیل معرفی کنید.

## نتیجه گیری

در پایان، ما فکر می کنیم Svelte یک فریمورک عالی است و برای Escape با کارشان با Svelte آرزوی بهترین ها را داریم! به هر حال، در حالی که ما می‌خواستیم برخی از نکات مقایسه‌ای را که بیان شده است روشن کنیم، همه ما بخشی از یک جامعه هستیم و می‌خواهیم به مردم کمک کنیم تا محصولات شگفت‌انگیزی برای کاربران بسازند.

---

در نهایت، اگر یک پایگاه کد در Vue 2 دارید و نگران نزدیک شدن به پایان عمر (EOY 2023) هستید، مهاجرت لزوما تنها انتخاب نیست. Vue 2 یک فناوری پایدار، اثبات شده و آزمایش شده در نبرد است که به کار خود ادامه خواهد داد. قبل از انجام مهاجرت های بزرگ، مطمئن شوید که سود و هزینه واقعی شما چقدر خواهد بود. برای کسانی که نیاز به رعایت مقررات امنیتی دارند، ما با [HeroDevs](https://www.herodevs.com/) همکاری می کنیم تا پشتیبانی گسترده ای را برای Vue 2 ارائه کنیم. اگر این چیزی است که تیم شما به آن نیاز دارد، لطفاً علاقه خود را ثبت کنید.  [اینجا](https://airtable.com/shrj37Zf4ZIfrxFzh).
`
